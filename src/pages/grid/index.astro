---
import Layout from "@layouts/Layout.astro";
import Card from "@components/Card.astro";
import { db, and, isNotNull, eq, Grid, Image, User } from "astro:db";
import type { ImagePosition } from "db/config";
import { convertGridSize } from '../../lib/grid'

const { user } = Astro.locals;

if (!user) {
  return Astro.redirect("/");
}

if (Astro.request.method === "POST") {
  
  // Let's fetch all the images from category 10
  const images = await db
    .select()
    .from(Image)
    .where(and(
      eq(Image.categoryId, 10),
      isNotNull(Image.gridsize),
    ))
    .all();


  // Create a new array for the x and y positions of the images
  // Sort the images by gridsize (first 20x20 images, then 40x40 images, etc.)
  // One image takes 80x80 pixels, so we need to calculate the gridsize
  // eg. [{ x: 0, y: 0, size: 20 }, { x: 80, y: 0, size: 20 }, { x: 0, y: 80, size: 10 }]
  const sortedImages = images.sort((a, b) => {
    if (!a.gridsize || !b.gridsize) {
      return 0;
    }

    if (a.gridsize === b.gridsize) {
      return 0;
    }

    return a.gridsize > b.gridsize ? -1 : 1;
  });
  const positions: ImagePosition[] = [];
  let x = 0;
  let y = 0;
  for (const image of sortedImages) {
    if (!image.gridsize) {
      continue;
    }

    const size = convertGridSize(image.gridsize);
    positions.push({
      imageId: image.id,
      x,
      y,
      size,
    });

    x += 80;
    if (x >= 800) {
      x = 0;
      y += 80;
    }
  }

  const grid = await db.insert(Grid).values([
    {
      userId: user.id,
      name: "Uusi ruudukko",
      imagePositions: positions,
      createdAt: new Date(),
    },
  ]);

  const redirectUrl = `/grid/${grid.lastInsertRowid}`;
  
  // This console.log is here just to suppress the astro check warning
  console.log('Redirecting to', redirectUrl);
  
  return Astro.redirect(redirectUrl);
}

// Get all grids
const grids = await db
  .select()
  .from(Grid)
  .innerJoin(User, eq(Grid.userId, User.id))
  .all();

---

<Layout title="Pala keravaani">
  <form method="post">
    <button
      id="add-grid-button"
      class="bg-amber-700 hover:bg-amber-600 text-white px-4 py-2 rounded-md cursor-pointer transition-colors mb-4"
      >Lisää uusi ruudukko
    </button>
  </form>
  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
      <!-- Grids -->
      {
        grids.map((grid) => {
          // Let's turn the unknown type into a known type
          const imagePositions = grid.Grid.imagePositions as ImagePosition[];
          const createdAt = new Intl.DateTimeFormat("fi-FI", {
            dateStyle: "medium",
            timeStyle: "short",
          }).format(grid.Grid.createdAt);
          return (
          <Card name={grid.Grid.name} id={grid.Grid.id} link={`/grid/${grid.Grid.id}`} imageCnt={imagePositions ? imagePositions.length : 0} author={grid.User.fullname} createdAt={createdAt}/>
          );
        })
      }

    </div></Layout
>
